{
  "address": "0xf41b6C5010bcA3e661276eF943ddf346EB7159d3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "_pA",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "_pB",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_pC",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[3]",
          "name": "_pubSignals",
          "type": "uint256[3]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x56a1ee392831d73ed21c5cb15008e584d0e410200d49ba4cb0a5c0e80064744f",
  "receipt": {
    "to": null,
    "from": "0xde358FCcA54Fa226aE16Ac3927487260dAfc3835",
    "contractAddress": "0xf41b6C5010bcA3e661276eF943ddf346EB7159d3",
    "transactionIndex": 34,
    "gasUsed": "428206",
    "logsBloom": "0x
    "blockHash": "0x9a4d8c25db2003842b064df3b7f355f8d9d5ccf9f0503730e3cc3a4a7d3a518a",
    "transactionHash": "0x56a1ee392831d73ed21c5cb15008e584d0e410200d49ba4cb0a5c0e80064744f",
    "logs": [],
    "blockNumber": 10026908,
    "cumulativeGasUsed": "3552957",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2952435429d325c43891bc96fab7531e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_pA\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"_pB\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_pC\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[3]\",\"name\":\"_pubSignals\",\"type\":\"uint256[3]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Verifier.sol\":\"Groth16Verifier\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Verifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n/*\\n    Copyright 2021 0KIMS association.\\n\\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\\n\\n    snarkJS is a free software: you can redistribute it and/or modify it\\n    under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\\n    License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract Groth16Verifier {\\n    // Scalar field size\\n    uint256 constant r    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    // Base field size\\n    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    // Verification Key data\\n    uint256 constant alphax  = 8150020295981585307478283832359552265462176312187988029035358111707501014066;\\n    uint256 constant alphay  = 20913390685983058084211285661167099608727577289147061334306441171857393219801;\\n    uint256 constant betax1  = 4255579011608506852143301216674072704563873314957311035724929062038257938714;\\n    uint256 constant betax2  = 3333870894541509441385744263043375537095839018851420288136644527257115569342;\\n    uint256 constant betay1  = 9854949990364624633552078173732885619062707722544683698013946620754474599713;\\n    uint256 constant betay2  = 21658814042011536209864553346729587664247524823563007211172040345412604362699;\\n    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n    uint256 constant deltax1 = 6093693044723630693277643390933203930568490851611705629465306499952007061362;\\n    uint256 constant deltax2 = 10579785711788825321824111291364193530446246352577574881771907795120560596203;\\n    uint256 constant deltay1 = 16333859941045372716185668741962019615352617686320457957945051637496153656663;\\n    uint256 constant deltay2 = 2109546034550934617148872695344288724538507142792773507685986003241723115387;\\n\\n    \\n    uint256 constant IC0x = 7724212964309540477163401941514573154031463830927843366184044533288788603844;\\n    uint256 constant IC0y = 6412848594307764062375758684825313505809061796734389836794088699481325890459;\\n    \\n    uint256 constant IC1x = 15462214940732558338286676641426651158080329278148349951118126830211434927068;\\n    uint256 constant IC1y = 18655714855248180002908196809847248189468567421716405470175082021813686656157;\\n    \\n    uint256 constant IC2x = 2333036830939263765468110470980760200004800932367594686625464686631419068772;\\n    uint256 constant IC2y = 12938407128252587870802156294667698388923690001691964741012397672315887347691;\\n    \\n    uint256 constant IC3x = 21573957602767367118384452127263400649261371866976903644476232999470016577935;\\n    uint256 constant IC3y = 16165704633260570727192152914319203867500798776692546249319122874633333973049;\\n    \\n \\n    // Memory data\\n    uint16 constant pVk = 0;\\n    uint16 constant pPairing = 128;\\n\\n    uint16 constant pLastMem = 896;\\n\\n    function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[3] calldata _pubSignals) public view returns (bool) {\\n        assembly {\\n            function checkField(v) {\\n                if iszero(lt(v, q)) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n            \\n            // G1 function to multiply a G1 value(x,y) to value in an address\\n            function g1_mulAccC(pR, x, y, s) {\\n                let success\\n                let mIn := mload(0x40)\\n                mstore(mIn, x)\\n                mstore(add(mIn, 32), y)\\n                mstore(add(mIn, 64), s)\\n\\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n\\n                mstore(add(mIn, 64), mload(pR))\\n                mstore(add(mIn, 96), mload(add(pR, 32)))\\n\\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n\\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\\n                let _pPairing := add(pMem, pPairing)\\n                let _pVk := add(pMem, pVk)\\n\\n                mstore(_pVk, IC0x)\\n                mstore(add(_pVk, 32), IC0y)\\n\\n                // Compute the linear combination vk_x\\n                \\n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\\n                \\n                g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))\\n                \\n                g1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))\\n                \\n\\n                // -A\\n                mstore(_pPairing, calldataload(pA))\\n                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))\\n\\n                // B\\n                mstore(add(_pPairing, 64), calldataload(pB))\\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\\n\\n                // alpha1\\n                mstore(add(_pPairing, 192), alphax)\\n                mstore(add(_pPairing, 224), alphay)\\n\\n                // beta2\\n                mstore(add(_pPairing, 256), betax1)\\n                mstore(add(_pPairing, 288), betax2)\\n                mstore(add(_pPairing, 320), betay1)\\n                mstore(add(_pPairing, 352), betay2)\\n\\n                // vk_x\\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\\n\\n\\n                // gamma2\\n                mstore(add(_pPairing, 448), gammax1)\\n                mstore(add(_pPairing, 480), gammax2)\\n                mstore(add(_pPairing, 512), gammay1)\\n                mstore(add(_pPairing, 544), gammay2)\\n\\n                // C\\n                mstore(add(_pPairing, 576), calldataload(pC))\\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\\n\\n                // delta2\\n                mstore(add(_pPairing, 640), deltax1)\\n                mstore(add(_pPairing, 672), deltax2)\\n                mstore(add(_pPairing, 704), deltay1)\\n                mstore(add(_pPairing, 736), deltay2)\\n\\n\\n                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)\\n\\n                isOk := and(success, mload(_pPairing))\\n            }\\n\\n            let pMem := mload(0x40)\\n            mstore(0x40, add(pMem, pLastMem))\\n\\n            // Validate that all evaluations \\u2208 F\\n            \\n            checkField(calldataload(add(_pubSignals, 0)))\\n            \\n            checkField(calldataload(add(_pubSignals, 32)))\\n            \\n            checkField(calldataload(add(_pubSignals, 64)))\\n            \\n            checkField(calldataload(add(_pubSignals, 96)))\\n            \\n\\n            // Validate all evaluations\\n            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\\n\\n            mstore(0, isValid)\\n             return(0, 0x20)\\n         }\\n     }\\n }\\n\",\"keccak256\":\"0x35f00404dd298cd6fe481d690e3f18ce8c64d4a720445f5bf3135488647b0891\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506106c8806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806311479fea14610030575b600080fd5b61004a600480360381019061004591906105f3565b610060565b6040516100579190610677565b60405180910390f35b600061052d565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478110610098576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa9150816100ce576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa9150816100fe576000805260206000f35b505050505050565b600060808601600087017f1113bfe65d4700cef7ad603e1bba768dd329db099e6a1fcfc1b00c5da68cb3c481527f0e2d8b2e7e8cc43d151da9e37e398cb29020cc98f8e9d8f80cbb7c9d57d8eb9b60208201526101a960008801357f293ec2aadd9628313a795081b8f8f811ec27eef7d651cf70099efde7a8bc5c9d7f222f4db39d39afd3fcacbe2e8586316200fe5f5f3768566e853e5bab0cd5d3dc8461009b565b6101f960208801357f1c9ae101008b3f76b49e24f45faa190107ad1bf30bf35fcc5405a1cd3f48e7eb7f052873b9a18959ffc5729542c37745f9e0ab1759d1ad4dcd67f809dee37f41648461009b565b61024960408801357f23bd76ee8f119da4eb221a1efa9342bce8202204f729e78a495eb299990320397f2fb26d62593a29c601f6c0710ccab6128702769be967b9e2ed713db9c2a1418f8461009b565b833582527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208501357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020830152843560408301526020850135606083015260408501356080830152606085013560a08301527f1204bf7e19cf7af26ef644a3bee189a8f4f2d5b1c87f41fbdf60a6024a4dac3260c08301527f2e3c8f45a44b4b516014e9ba294b206afc26a53441c0a12aeace6762e41a78d960e08301527f0968928672297f818298b32ee1a847fddcc20f3c05eb43ee9b3fd61d925a311a6101008301527f075ee77046bc58719c43c5899e1e9d9fbffecdcb27299a006c6a4e2d5d8e2cbe6101208301527f15c9b43b309509090c9ce8b06c502a8e9afc38dd659f000a063b33401acc85216101408301527f2fe2744e9cbbf1c6390b9dfe57ce17328855253eb135f36fb9ad6628b6a97fcb610160830152600088015161018083015260206000018801516101a08301527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08301527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08301527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008301527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220830152853561024083015260208601356102608301527f0d78e8753809dd20bae56b9a5745d85ae825732f9176f75472c85eb0ffd21f726102808301527f1763f24e59e98f5ed6e2f7c28c36ea2caaecab4d2c3fa69f652b228866a4e4eb6102a08301527f241ca31993f2d02dfff1543ec5e83a75d77faf244bbecd11ecca428d84984d576102c08301527f04a9f5f343e099672f3009a3ebffaf831e58e0c1cf80d644d88f36a29cbe377b6102e08301526020826103008460086107d05a03fa82518116935050505095945050505050565b60405161038081016040526105456000840135610067565b6105526020840135610067565b61055f6040840135610067565b61056c6060840135610067565b610579818486888a610106565b8060005260206000f35b600080fd5b600080fd5b6000819050826020600202820111156105a9576105a8610588565b5b92915050565b6000819050826040600202820111156105cb576105ca610588565b5b92915050565b6000819050826020600302820111156105ed576105ec610588565b5b92915050565b600080600080610160858703121561060e5761060d610583565b5b600061061c8782880161058d565b945050604061062d878288016105af565b93505060c061063e8782880161058d565b925050610100610650878288016105d1565b91505092959194509250565b60008115159050919050565b6106718161065c565b82525050565b600060208201905061068c6000830184610668565b9291505056fea2646970667358221220176d5c8af11649e8463dba28eb58080a3029fa0f61e4d43d4b39d374ad22c67664736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806311479fea14610030575b600080fd5b61004a600480360381019061004591906105f3565b610060565b6040516100579190610677565b60405180910390f35b600061052d565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478110610098576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa9150816100ce576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa9150816100fe576000805260206000f35b505050505050565b600060808601600087017f1113bfe65d4700cef7ad603e1bba768dd329db099e6a1fcfc1b00c5da68cb3c481527f0e2d8b2e7e8cc43d151da9e37e398cb29020cc98f8e9d8f80cbb7c9d57d8eb9b60208201526101a960008801357f293ec2aadd9628313a795081b8f8f811ec27eef7d651cf70099efde7a8bc5c9d7f222f4db39d39afd3fcacbe2e8586316200fe5f5f3768566e853e5bab0cd5d3dc8461009b565b6101f960208801357f1c9ae101008b3f76b49e24f45faa190107ad1bf30bf35fcc5405a1cd3f48e7eb7f052873b9a18959ffc5729542c37745f9e0ab1759d1ad4dcd67f809dee37f41648461009b565b61024960408801357f23bd76ee8f119da4eb221a1efa9342bce8202204f729e78a495eb299990320397f2fb26d62593a29c601f6c0710ccab6128702769be967b9e2ed713db9c2a1418f8461009b565b833582527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208501357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020830152843560408301526020850135606083015260408501356080830152606085013560a08301527f1204bf7e19cf7af26ef644a3bee189a8f4f2d5b1c87f41fbdf60a6024a4dac3260c08301527f2e3c8f45a44b4b516014e9ba294b206afc26a53441c0a12aeace6762e41a78d960e08301527f0968928672297f818298b32ee1a847fddcc20f3c05eb43ee9b3fd61d925a311a6101008301527f075ee77046bc58719c43c5899e1e9d9fbffecdcb27299a006c6a4e2d5d8e2cbe6101208301527f15c9b43b309509090c9ce8b06c502a8e9afc38dd659f000a063b33401acc85216101408301527f2fe2744e9cbbf1c6390b9dfe57ce17328855253eb135f36fb9ad6628b6a97fcb610160830152600088015161018083015260206000018801516101a08301527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08301527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08301527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008301527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220830152853561024083015260208601356102608301527f0d78e8753809dd20bae56b9a5745d85ae825732f9176f75472c85eb0ffd21f726102808301527f1763f24e59e98f5ed6e2f7c28c36ea2caaecab4d2c3fa69f652b228866a4e4eb6102a08301527f241ca31993f2d02dfff1543ec5e83a75d77faf244bbecd11ecca428d84984d576102c08301527f04a9f5f343e099672f3009a3ebffaf831e58e0c1cf80d644d88f36a29cbe377b6102e08301526020826103008460086107d05a03fa82518116935050505095945050505050565b60405161038081016040526105456000840135610067565b6105526020840135610067565b61055f6040840135610067565b61056c6060840135610067565b610579818486888a610106565b8060005260206000f35b600080fd5b600080fd5b6000819050826020600202820111156105a9576105a8610588565b5b92915050565b6000819050826040600202820111156105cb576105ca610588565b5b92915050565b6000819050826020600302820111156105ed576105ec610588565b5b92915050565b600080600080610160858703121561060e5761060d610583565b5b600061061c8782880161058d565b945050604061062d878288016105af565b93505060c061063e8782880161058d565b925050610100610650878288016105d1565b91505092959194509250565b60008115159050919050565b6106718161065c565b82525050565b600060208201905061068c6000830184610668565b9291505056fea2646970667358221220176d5c8af11649e8463dba28eb58080a3029fa0f61e4d43d4b39d374ad22c67664736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}